{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","className","type","placeholder","autoFocus","onChange","e","target","value","size","bgColor","fgColor","level","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAmDeA,MA5Cf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KASA,OACE,qBAAKC,UAAU,MAAf,SACE,uBAAMA,UAAU,SAAhB,UACA,wDACA,uBACEC,KAAK,OACLC,YAAY,kBACZF,UAAU,aACVG,UAAU,OACVC,SAhBe,SAAAC,GAEnBN,EAASM,EAAEC,OAAOC,UAiBhB,sBAAMP,UAAW,SAAjB,SACG,cAAC,IAAD,CAECO,MAAOT,EAEPU,KAAK,MAELC,QAAQ,UAERC,QAAQ,QAERC,MAAM,cC7BDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.412e3db2.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport QRCode from 'react-qr-code'\nimport './App.css';\n<style>\n@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100&display=swap');\n</style>\n\nfunction App() {\n\n  const [input, setInput] = useState('');\n\n  const handleChange = e => {\n    //Vamos a almacenar el valor de lo que se ingreso en el input\n    setInput(e.target.value);\n  }\n\n\n\n  return (\n    <div className=\"App\" >\n      <form className=\"qrForm\">\n      <h1>Generador de codigo QR</h1>\n      <input \n        type=\"text\" \n        placeholder=\"Ingresa el link\" \n        className=\"inputStyle\"\n        autoFocus=\"true\"\n        onChange={handleChange}\n        \n      />\n      <form className= \"qrCode\">\n         <QRCode \n          //El mensaje del codigo QR\n          value={input} \n          //Tamaño del codigo QR\n          size=\"256\"\n          //Color del fondo\n          bgColor=\"#E8F1F5\"\n          //Color del codigo\n          fgColor=\"black\"\n          //Capacidad de poder leer el contenido del QR aunque tenga una parte dañada\n          level=\"H\"\n            />\n      </form>\n      \n      </form>\n    </div>\n      \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}